services:
  # Databases
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: zaplify
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports: ["5432:5432"]
    volumes: [postgres_data:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d zaplify || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s

  mongodb:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports: ["27017:27017"]
    volumes: [mongodb_data:/data/db]
    healthcheck:
      test:
        ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 5s

  # API Gateway (Node/TS)
  api-gateway:
    build:
      context: ../services/api-gateway
      dockerfile: Dockerfile
    working_dir: /app
    command: npm run dev
    environment:
      NODE_ENV: development
      PORT: 8080
      CHOKIDAR_USEPOLLING: "true"
      DATABASE_URL: postgresql://postgres:password@postgres:5432/zaplify
      REDIS_URL: redis://redis:6379
      AI_SERVICE_URL: http://ia-conversational:8001
      WHATSAPP_SERVICE_URL: http://whatsapp-service:8081
      FUNNEL_ENGINE_URL: http://funnel-engine:8082
      ANALYTICS_SERVICE_URL: http://analytics-service:8002
    ports: ["3000:8080"]
    volumes:
      - ../services/api-gateway/src:/app/src
      - ../services/api-gateway/package.json:/app/package.json
      - ../services/api-gateway/tsconfig.json:/app/tsconfig.json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ia-conversational:
        condition: service_healthy
      whatsapp-service:
        condition: service_healthy
      funnel-engine:
        condition: service_healthy
      analytics-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s

  # IA Conversational (Python/FastAPI)
  ia-conversational:
    build:
      context: ../services/ia-conversational
      dockerfile: Dockerfile
    working_dir: /app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    environment:
      ENVIRONMENT: development
      REDIS_URL: redis://redis:6379
      API_GATEWAY_URL: http://api-gateway:8080
    ports: ["8001:8001"]
    volumes: [../services/ia-conversational/app:/app/app]
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen(''http://localhost:8001/health'').getcode()==200 else 1)"',
        ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s

  # WhatsApp Service (Node/TS)
  whatsapp-service:
    build:
      context: ../services/whatsapp-service
      dockerfile: Dockerfile
    working_dir: /app
    command: npm run dev
    environment:
      NODE_ENV: development
      PORT: 8081
      CHOKIDAR_USEPOLLING: "true"
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zaplify-whatsapp?authSource=admin
      REDIS_URL: redis://redis:6379
      API_GATEWAY_URL: http://api-gateway:8080
      AI_SERVICE_URL: http://ia-conversational:8001
    ports: ["3002:8081"]
    volumes:
      - ../services/whatsapp-service/src:/app/src
      - ../services/whatsapp-service/package.json:/app/package.json
      - ../services/whatsapp-service/tsconfig.json:/app/tsconfig.json
      - whatsapp_sessions:/app/sessions
      - whatsapp_media:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8081/health"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s

  # Funnel Engine (Node/TS)
  funnel-engine:
    build:
      context: ../services/funnel-engine
      dockerfile: Dockerfile
    working_dir: /app
    command: npm run dev
    environment:
      NODE_ENV: development
      PORT: 8082
      CHOKIDAR_USEPOLLING: "true"
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zaplify-funnel?authSource=admin
      REDIS_URL: redis://redis:6379
      API_GATEWAY_URL: http://api-gateway:8080
      AI_SERVICE_URL: http://ia-conversational:8001
      WHATSAPP_SERVICE_URL: http://whatsapp-service:8081
    ports: ["3003:8082"]
    volumes:
      - ../services/funnel-engine/src:/app/src
      - ../services/funnel-engine/package.json:/app/package.json
      - ../services/funnel-engine/tsconfig.json:/app/tsconfig.json
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8082/health"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s

  # Analytics Service (Python/FastAPI)
  analytics-service:
    build:
      context: ../services/analytics-service
      dockerfile: Dockerfile
    working_dir: /app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/zaplify_analytics
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zaplify_analytics?authSource=admin
      REDIS_URL: redis://redis:6379
      API_GATEWAY_URL: http://api-gateway:8080
    ports: ["8002:8002"]
    volumes:
      - ../services/analytics-service/app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen(''http://localhost:8002/health'').getcode()==200 else 1)"',
        ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  whatsapp_sessions:
  whatsapp_media:
