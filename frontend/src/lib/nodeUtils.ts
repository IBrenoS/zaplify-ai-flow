
import { Node } from '@xyflow/react';

export const getNodeStyle = (nodeType: string, isFocusMode: boolean = false, isDarkTheme: boolean = false) => {
  if (isFocusMode) {
    return {
      background: 'rgba(24, 24, 24, 0.95)',
      color: '#ffffff',
      border: '2px solid #FF4500',
      borderRadius: '12px',
      padding: '16px',
      minWidth: '180px',
      fontSize: '14px',
      fontWeight: '500',
      boxShadow: '0 8px 25px -5px rgba(255, 69, 0, 0.3), 0 4px 10px -2px rgba(0, 0, 0, 0.5)',
      backdropFilter: 'blur(10px)',
      transition: 'all 0.5s ease-in-out'
    };
  }
  
  if (isDarkTheme) {
    return {
      background: '#181818',
      color: '#F5F5F5',
      border: '1px solid #333',
      borderRadius: '12px',
      padding: '16px',
      minWidth: '180px',
      fontSize: '14px',
      fontWeight: '500',
      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2)',
      transition: 'all 0.5s ease-in-out'
    };
  }
  
  return {
    background: 'white',
    color: '#374151',
    border: '2px solid #e5e7eb',
    borderRadius: '12px',
    padding: '16px',
    minWidth: '180px',
    fontSize: '14px',
    fontWeight: '500',
    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
    transition: 'all 0.5s ease-in-out'
  };
};

export const createInitialNode = (): Node[] => {
  return [{
    id: '1',
    type: 'default',
    position: { x: 300, y: 100 },
    data: { 
      label: 'In√≠cio do Funil',
      type: 'start',
      icon: 'üéØ'
    },
    style: getNodeStyle('start')
  }];
};

export const nodeConfig: Record<string, { icon: string; label: string }> = {
  // Sources
  'facebook-ads': { icon: 'üìò', label: 'Facebook Ads' },
  'instagram-ads': { icon: 'üì∏', label: 'Instagram Ads' },
  'google-ads': { icon: 'üéØ', label: 'Google Ads' },
  'google-organic': { icon: 'üîç', label: 'Google Org√¢nico' },
  'facebook-organic': { icon: 'üìò', label: 'Facebook Org√¢nico' },
  'instagram-organic': { icon: 'üì∏', label: 'Instagram Org√¢nico' },
  'direct': { icon: 'üåê', label: 'Tr√°fego Direto' },
  'email': { icon: 'üìß', label: 'E-mail Marketing' },
  
  // Pages
  'opt-in': { icon: 'üìÑ', label: 'P√°gina de Captura' },
  'sales-page': { icon: 'üí∞', label: 'P√°gina de Vendas' },
  'thank-you': { icon: 'üôè', label: 'P√°gina de Obrigado' },
  'webinar': { icon: 'üé•', label: 'Webinar' },
  
  // Actions
  'purchase': { icon: 'üõí', label: 'Compra' },
  'schedule': { icon: 'üìÖ', label: 'Agendamento' },
  'form': { icon: 'üìã', label: 'Formul√°rio' },
  
  // Sales Optimization
  'upsell': { icon: 'üí≤‚Üë', label: 'Upsell' },
  'downsell': { icon: 'üí≤‚Üì', label: 'Downsell' },
  'order-bump': { icon: 'üõí+', label: 'Order Bump' },
  
  // Zaplify Actions
  'whatsapp-message': { icon: 'üí¨', label: 'Mensagem WhatsApp' },
  'ai-assistant': { icon: 'ü§ñ', label: 'Assistente IA' },
  'add-tag': { icon: 'üè∑Ô∏è', label: 'Adicionar Etiqueta' },
  'wait': { icon: '‚è∞', label: 'Esperar' },
  'condition': { icon: '‚ùì', label: 'Condi√ß√£o IF/ELSE' }
};

export const createNode = (nodeType: string, position: { x: number; y: number }, isFocusMode: boolean = false, isDarkTheme: boolean = false): Node => {
  const config = nodeConfig[nodeType] || { icon: '‚≠ê', label: 'Novo N√≥' };
  
  return {
    id: `${Date.now()}`,
    type: 'default',
    position,
    data: { 
      label: config.label,
      type: nodeType,
      icon: config.icon
    },
    style: getNodeStyle(nodeType, isFocusMode, isDarkTheme)
  };
};
